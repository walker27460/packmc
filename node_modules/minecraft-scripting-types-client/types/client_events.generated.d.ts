//////////////////////////////////////////////////////////////
// This file is generated from the Minecraft documentation. //
// DO NOT EDIT THIS FILE! YOUR CHANGES WILL BE OVERWRITTEN! //
//////////////////////////////////////////////////////////////

/**
 * (Client-side) Events that can be sent to Minecraft to achieve an effect. 
 */
declare const enum SendToMinecraftClient {
    /**
     * This event is used to display a chat message to the specific player that is running the client script. The event data is the message to be displayed in plain text. Special formatting is supported the same way it would be if a player was sending the message.
     */
    DisplayChat = "minecraft:display_chat_event",
    /**
     * This event is used to show a UI screen to the specific player running the client script. This event will add the UI screen to the top of the UI screen stack. The screen will be shown immediately after the event is triggered. Only screens defined in a HTML file can be shown using this event.
     */
    LoadUI = "minecraft:load_ui",
    /**
     * This event is used to turn various levels of logging on and off for client scripts. Note that turning logging on/off is not limited to the script that broadcasted the event. It will affect ALL client scripts including those in other Behavior Packs that are applied to the world. See the Debugging section for more information on logging.
     */
    ScriptLoggerConfig = "minecraft:script_logger_config",
    /**
     * This event is used to send UI events to the UI Engine for the specific player running the script. After the event is triggered, the UI event will be sent immediately.
     * Custom UI is based on HTML 5. Review the scripting demo for an example of a custom UI file.
     */
    SendUIEvent = "minecraft:send_ui_event",
    /**
     * This event is used to create a particle effect that will follow an entity around. This particle effect is only visible to the specific player that is running the client script where you fired the event. Any effect defined in a JSON file (both in your resource pack and in Minecraft) can be used here. MoLang variables defined in the JSON of the effect can then be used to control that effect by changing them in the entity to which it is attached.
     */
    SpawnParticleAttachedEntity = "minecraft:spawn_particle_attached_entity",
    /**
     * This event is used to create a static particle effect in the world. This particle effect is only visible to the specific player that is running the client script where you fired the event. Any effect defined in a JSON file (both in your resource pack and in Minecraft) can be used here. Once the effect is spawned you won't be able to control it further. Unlike the server version of the event, the client version will spawn the particle in the dimension the player is currently in.
     */
    SpawnParticleInWorld = "minecraft:spawn_particle_in_world",
    /**
     * This event is used to remove a UI screen from the stack of the specific player running the client script. The event data contains the name of the screen to remove as a string. After the event is triggered the screen will be scheduled to be removed from the stack the next time the UI Engine can do so. Only screens defined in a HTML file can be removed using this event.
     */
    UnloadUI = "minecraft:unload_ui"
}

/**
 * (Client-side) Events that can be received from Minecraft
 */
declare const enum ReceiveFromMinecraftClient {
    /**
     * This event is fired whenever a player joins the world. The event data contains the player entity object.
     */
    ClientEnteredWorld = "minecraft:client_entered_world",
    /**
     * This event is triggered whenever the reticle changes from pointing at a block or air to pointing at an entity and the other way around. Up to 1000 blocks away.
     */
    HitResultChanged = "minecraft:hit_result_changed",
    /**
     * This event is triggered every update and tells you what entity the reticle is pointing to in the world up to 1000 blocks away.
     */
    HitResultContinuous = "minecraft:hit_result_continuous",
    /**
     * This event is triggered whenever the mouse pointer changes from pointing at a block or air to pointing at an entity and the other way around. Up to 1000 blocks away.
     */
    PickHitResultChanged = "minecraft:pick_hit_result_changed",
    /**
     * This event is triggered every update and tells you what entity the mouse pointer is pointing to in the world up to 1000 blocks away.
     */
    PickHitResultContinuous = "minecraft:pick_hit_result_continuous",
    /**
     * FIXME - UNDOCUMENTED - NO DESCRIPTION FROM MOJANG
     */
    UIEvent = "minecraft:ui_event"
}

/**
 * This event is used to display a chat message to the specific player that is running the client script. The event data is the message to be displayed in plain text. Special formatting is supported the same way it would be if a player was sending the message.
 */
declare interface IDisplayChatParameters {
    /**
     * The chat message that will be displayed
     */
    message: string;
}

/**
 * This event is used to show a UI screen to the specific player running the client script. This event will add the UI screen to the top of the UI screen stack. The screen will be shown immediately after the event is triggered. Only screens defined in a HTML file can be shown using this event.
 */
declare interface ILoadUIParameters {
    /**
     * You can define the following options for the screen by setting their value to true or false:
     */
    options?: {
        /**
         * If true, input will not be passed down to any other screens underneath
         */
        absorbs_input?: boolean;
        /**
         * If true, the screen will always accept and process input for as long as it is in the stack, even if other custom UI screens appear on top of it
         */
        always_accepts_input?: boolean;
        /**
         * If true, this screen will be rendered even if another screen is on top of it and will render over them, including the HUD
         */
        force_render_below?: boolean;
        /**
         * If true, the screen will be treated as the pause menu and the pause menu won't be allowed to show on top of this screen
         */
        is_showing_menu?: boolean;
        /**
         * If true, the game will continue to be rendered underneath this screen
         */
        render_game_behind?: boolean;
        /**
         * If true, this screen will only be rendered if it is the screen at the top of the stack
         */
        render_only_when_topmost?: boolean;
        /**
         * If true, the screen will capture the mouse pointer and limit its movement to the UI screen
         */
        should_steal_mouse?: boolean;
    };
    /**
     * The file path to the screen's HTML file
     */
    path: string;
}

/**
 * This event is used to turn various levels of logging on and off for client scripts. Note that turning logging on/off is not limited to the script that broadcasted the event. It will affect ALL client scripts including those in other Behavior Packs that are applied to the world. See the Debugging section for more information on logging.
 */
declare interface IScriptLoggerConfigParameters {
    /**
     * Set to true to log any scripting errors that occur on the client
     * @default false
     */
    log_errors: boolean;
    /**
     * Set to true to log any general scripting information that occurs on the client. This includes any logging done with client.log()
     * @default false
     */
    log_information: boolean;
    /**
     * Set to true to log any scripting warnings that occur on the client
     * @default false
     */
    log_warnings: boolean;
}

/**
 * This event is used to send UI events to the UI Engine for the specific player running the script. After the event is triggered, the UI event will be sent immediately.
 * Custom UI is based on HTML 5. Review the scripting demo for an example of a custom UI file.
 */
declare interface ISendUIEventParameters {
    /**
     * The data for the UI event being triggered
     */
    data: string;
    /**
     * The identifier of the UI event
     */
    eventIdentifier: string;
}

/**
 * This event is used to create a particle effect that will follow an entity around. This particle effect is only visible to the specific player that is running the client script where you fired the event. Any effect defined in a JSON file (both in your resource pack and in Minecraft) can be used here. MoLang variables defined in the JSON of the effect can then be used to control that effect by changing them in the entity to which it is attached.
 */
declare interface ISpawnParticleAttachedEntityParameters {
    /**
     * The identifier of the particle effect you want to attach to the entity. This is the same name you gave the effect in its JSON file
     */
    effect: ParticleEffect;
    /**
     * The entity object you want to attach the effect to
     */
    entity: IEntity;
    /**
     * The offset from the entity's "center" where you want to spawn the effect
     * @default [0, 0, 0]
     */
    offset: VectorArray;
}

/**
 * This event is used to create a static particle effect in the world. This particle effect is only visible to the specific player that is running the client script where you fired the event. Any effect defined in a JSON file (both in your resource pack and in Minecraft) can be used here. Once the effect is spawned you won't be able to control it further. Unlike the server version of the event, the client version will spawn the particle in the dimension the player is currently in.
 */
declare interface ISpawnParticleInWorldParameters {
    /**
     * The identifier of the particle effect you want to attach to spawn. This is the same name you gave the effect in its JSON file
     */
    effect: ParticleEffect;
    /**
     * The position in the world where you want to spawn the effect
     * @default [0, 0, 0]
     */
    position: VectorArray;
}

/**
 * This event is used to remove a UI screen from the stack of the specific player running the client script. The event data contains the name of the screen to remove as a string. After the event is triggered the screen will be scheduled to be removed from the stack the next time the UI Engine can do so. Only screens defined in a HTML file can be removed using this event.
 */
declare interface IUnloadUIParameters {
    /**
     * The file path to the screen's HTML file
     */
    path: string;
}

/**
 * This event is fired whenever a player joins the world. The event data contains the player entity object.
 */
declare interface IClientEnteredWorldEventData {
    /**
     * the player entering the world
     */
    player: IEntity;
}

/**
 * This event is triggered whenever the reticle changes from pointing at a block or air to pointing at an entity and the other way around. Up to 1000 blocks away.
 */
declare interface IHitResultChangedEventData {
    /**
     * The entity that was hit or null if it fired when moving off of an entity
     */
    entity: IEntity;
    /**
     * The position of the entity that was hit or null if it fired when moving off an entity
     */
    position: VectorXYZ | null;
}

/**
 * This event is triggered every update and tells you what entity the reticle is pointing to in the world up to 1000 blocks away.
 */
declare interface IHitResultContinuousEventData {
    /**
     * The entity that was hit or null if it not pointing at an entity
     */
    entity: IEntity;
    /**
     * The position of the entity that was hit or block that was hit
     */
    position: VectorXYZ;
}

/**
 * This event is triggered whenever the mouse pointer changes from pointing at a block or air to pointing at an entity and the other way around. Up to 1000 blocks away.
 */
declare interface IPickHitResultChangedEventData {
    /**
     * The entity that was hit or null if it fired when moving off of an entity
     */
    entity: IEntity;
    /**
     * The position of the entity that was hit or null if it fired when moving off an entity
     */
    position: VectorXYZ | null;
}

/**
 * This event is triggered every update and tells you what entity the mouse pointer is pointing to in the world up to 1000 blocks away.
 */
declare interface IPickHitResultContinuousEventData {
    /**
     * The entity that was hit or null if it not pointing at an entity
     */
    entity: IEntity;
    /**
     * The position of the entity that was hit or block that was hit
     */
    position: VectorXYZ;
}
